/*
 * Renjin : JVM-based interpreter for the R language for the statistical analysis
 * Copyright Â© 2010-${$file.lastModified.year} BeDataDriven Groep B.V. and contributors
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, a copy is available at
 *  https://www.gnu.org/licenses/gpl-2.0.txt
 *
 */


configurations {
    gcc
    compile
}

dependencies {
    gcc project(':tools:gcc-bridge:gcc-bridge-compiler')

    compile project(':tools:gcc-bridge:runtime')
    compile project(':math:common')
}

def compiledOutputDir = "$buildDir/gcc-bridge/classes"

sourceSets {
    main {
        output.dir(compiledOutputDir, builtBy: 'compileGimple')
    }
}
def fortranDir = project.file('src/main/fortran')
def cDir = project.file('src/main/c')

if(fortranDir.exists()) {
    task compileFortran(dependsOn: ':tools:gcc-bridge:gcc-bridge-compiler:compilePlugin') {

        def gimpleDir = project.file('build/fortran/gimple')
        inputs.dir fortranDir
        outputs.dir gimpleDir

        doFirst {
            gimpleDir.mkdirs()

            def tempDir = project.file('build/fortran/work')
            tempDir.mkdirs()

            fortranDir.eachFile { sourceFile ->
                if (sourceFile.name.endsWith('.f')) {
                    project.exec {
                        workingDir tempDir
                        executable 'gfortran-4.7'
                        args '-m32'
                        args '-D_GCC_BRIDGE', '-D_RENJIN'
                        args '-c'
                        args "-fplugin=${gccBridgePlugin}"
                        args "-fplugin-arg-bridge-json-output-file=${gimpleDir.absolutePath}/${sourceFile.name}.gimple"
                        args sourceFile.absolutePath
                    }
                }
            }
        }
    }
}

if(cDir.exists()) {
    task compileC(dependsOn: ':tools:gcc-bridge:gcc-bridge-compiler:compilePlugin') {

        def gimpleDir = project.file('build/c/gimple')
        inputs.dir cDir
        outputs.dir gimpleDir

        ext.cflags = []

        doFirst {
            gimpleDir.mkdirs()

            def tempDir = project.file('build/c/work')
            tempDir.mkdirs()

            cDir.eachFile { sourceFile ->
                if (sourceFile.name.endsWith('.c')) {
                    project.exec {
                        workingDir tempDir
                        executable 'gcc-4.7'
                        args '-m32'
                        args '-D_GCC_BRIDGE', '-D_RENJIN'
                        args '-c'
                        args += cflags
                        args "-fplugin=${gccBridgePlugin}"
                        args "-fplugin-arg-bridge-json-output-file=${gimpleDir.absolutePath}/${sourceFile.name}.gimple"
                        args sourceFile.absolutePath
                    }
                }
            }
        }
    }
}

task compileGimple(type: JavaExec) {

    if(fortranDir.exists()) {
        dependsOn 'compileFortran'
        inputs.dir fortranDir
    }
    if(cDir.exists()) {
        dependsOn 'compileC'
        inputs.dir cDir
    }
    
    outputs.dir compiledOutputDir

    ext.packageName = 'org.renjin'
    ext.className = ''
    
    classpath configurations.gcc
    classpath sourceSets.main.compileClasspath

    main = 'org.renjin.gcc.GimpleCompiler'
    doFirst {
        args "--package=${packageName}"
        if(className) {
            args "--class=${className}"
        }
        args "--log-dir=$buildDir/gcc-bridge-logs"
        args "--output-dir=${compiledOutputDir}"
        if(fortranDir.exists()) {
            args 'build/fortran/gimple'
        }
        if(cDir.exists()) {
            args 'build/c/gimple'
        }
    }
}
